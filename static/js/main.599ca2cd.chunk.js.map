{"version":3,"sources":["Document.js","App.js","serviceWorker.js","index.js"],"names":["Document","this","props","documents","filter","term","x","title","toLowerCase","includes","map","document","href","description","React","Component","App","searchHandler","event","setState","target","value","onSubmit","preventDefault","isSubmitted","state","className","type","onChange","onClick","to","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAyBeA,E,iLAfP,OACI,6BACKC,KAAKC,MAAMC,UAAUC,QAVhBC,EAUoCJ,KAAKC,MAAMG,KAT1D,SAASC,GACZ,OAAOA,EAAEC,MAAMC,cAAcC,SAASJ,EAAKG,iBAAmBH,KAQMK,KAAI,SAACC,GAC7D,OACI,6BACI,uBAAGC,KAAK,KAAKD,EAASJ,OACtB,6BAAMI,EAASE,kBAdtB,IAACR,M,GAMCS,IAAMC,W,QCFvBZ,G,MAAY,CAChB,CAACI,MAAO,YAAaM,YAAa,yBAClC,CAACN,MAAO,YAAaM,YAAa,yBAClC,CAACN,MAAO,YAAaM,YAAa,yBAClC,CAACN,MAAO,YAAaM,YAAa,2BA8CrBG,E,YAzCb,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KASRe,cAAgB,SAACC,GACf,EAAKC,SAAS,CACZd,KAAMa,EAAME,OAAOC,SAZJ,EAgBnBC,SAAW,SAACJ,GACVA,EAAMK,iBACN,EAAKJ,SAAS,CACZK,aAAa,KAhBf,EAAKC,MAAQ,CACXtB,UAAWA,EACXE,KAAM,GACNmB,aAAa,GANE,E,sEAwBjB,OACE,kBAAC,IAAD,KACE,6BACI,yBAAKE,UAAS,UAAKzB,KAAKwB,MAAMD,YAAc,cAAgB,SACxD,2BAAOG,KAAK,OAAQC,SAAU3B,KAAKgB,cAAeI,MAAOpB,KAAKwB,MAAMpB,OACrE,4BAAQqB,UAAU,SAAQC,KAAK,SAASE,QAAS5B,KAAKqB,UAAtD,WAEH,kBAAC,IAAD,CAAMQ,GAAE,iBAAY7B,KAAKwB,MAAMpB,MAAQqB,UAAU,cAC9CzB,KAAKwB,MAAMD,aAAe,kBAAC,EAAD,CAAUrB,UAAWF,KAAKwB,MAAMtB,UAAWE,KAAMJ,KAAKwB,MAAMpB,c,GAjCnFS,IAAMC,WCFJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAS1B,SAAS2B,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.599ca2cd.chunk.js","sourcesContent":["import React from 'react';\n\nconst searchingFor = (term) => {\n    return function(x) {\n        return x.title.toLowerCase().includes(term.toLowerCase()) || !term;\n    }\n}\n\nclass Document extends React.Component {\n    render() {\n        return(\n            <div>\n                {this.props.documents.filter(searchingFor(this.props.term)).map((document) => {\n                    return (\n                        <div>\n                            <a href=\"#\">{document.title}</a>\n                            <div>{document.description}</div>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n} \n\nexport default Document","import React from 'react';\nimport Document from './Document';\nimport { BrowserRouter, Link } from 'react-router-dom';\nimport  './index.css';\n\n\nconst documents = [\n  {title: 'Document1', description: 'Document1 description'},\n  {title: 'Document2', description: 'Document2 description'},\n  {title: 'Document3', description: 'Document3 description'},\n  {title: 'Document4', description: 'Document4 description'}\n]\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      documents: documents,\n      term: '',\n      isSubmitted: false\n    }\n  }\n  \n  searchHandler = (event) => {\n    this.setState({\n      term: event.target.value\n    });\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n    this.setState({\n      isSubmitted: true\n    });\n  }\n\n  render() {\n    return (\n      <BrowserRouter>  \n        <div>\n            <div className={`${this.state.isSubmitted ? 'result-wrap' : 'wrap'}`}>\n                <input type=\"text\"  onChange={this.searchHandler} value={this.state.term}/>\n               <button className='button'type=\"submit\" onClick={this.onSubmit}>Search</button>\n            </div>\n            <Link to={`param1=${this.state.term}`} className='search-res'>\n              {this.state.isSubmitted && <Document documents={this.state.documents} term={this.state.term}/>}\n           </Link>   \n        </div>\n      </BrowserRouter>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}